#!/bin/sh
#
# An example hook script to verify what is about to be committed.
# Called by "git commit" with no arguments.  The hook should
# exit with non-zero status after issuing an appropriate message if
# it wants to stop the commit.
#
# To enable this hook, rename this file to "pre-commit".

#!/bin/bash

# Ensure the script exits on any error
set -e

# Path to package.json
PACKAGE_JSON="package.json"

# Use jq (or a Node.js script) to increment the version
if command -v jq >/dev/null 2>&1; then
  # Using jq to increment patch version
  NEW_VERSION=$(jq -r '.version' "$PACKAGE_JSON" | awk -F. '{OFS="."; $3+=1; print $0}')
  jq ".version = \"$NEW_VERSION\"" "$PACKAGE_JSON" > temp.json && mv temp.json "$PACKAGE_JSON"
  echo "Version updated to $NEW_VERSION"
else
  # If jq is not available, use Node.js
  node -e "
  const fs = require('fs');
  const pkg = JSON.parse(fs.readFileSync('$PACKAGE_JSON'));
  const [major, minor, patch] = pkg.version.split('.').map(Number);
  pkg.version = [major, minor, patch + 1].join('.');
  fs.writeFileSync('$PACKAGE_JSON', JSON.stringify(pkg, null, 2) + '\n');
  console.log('Version updated to', pkg.version);
  "
fi

# Stage the updated package.json
git add "$PACKAGE_JSON"

echo "package.json updated and staged."