#!/bin/bash

# Ensure the script exits on any error
set -e

# Path to package.json
PACKAGE_JSON="package.json"

# Get the last commit message
LAST_COMMIT_MSG=$(git log -1 --pretty=%B)

# Skip if the commit was made by this hook
if [[ "$LAST_COMMIT_MSG" == "chore: increment version to "* ]]; then
  echo "Skipping version update to avoid hook cycle."
  exit 0
fi

if command -v jq >/dev/null 2>&1; then
  # Using jq to read the current version
  CURRENT_VERSION=$(jq -r '.version' "$PACKAGE_JSON")
  
  # Parse the version into its components
  IFS='.' read -r MAJOR MINOR PATCH COMMIT <<< "$CURRENT_VERSION"
  
  # Check if the 4th number (COMMIT) is below 1000
  if [ "$COMMIT" -lt 1000 ]; then
    COMMIT=$((COMMIT + 1))
  else
    PATCH=$((PATCH + 1))
    COMMIT=1
  fi
  
  # Construct the new version
  NEW_VERSION="$MAJOR.$MINOR.$PATCH.$COMMIT"
  
  # Update the package.json file with the new version
  jq ".version = \"$NEW_VERSION\"" "$PACKAGE_JSON" > temp.json && mv temp.json "$PACKAGE_JSON"
  
  echo "Version updated to $NEW_VERSION"
else
  # If jq is not available, use Node.js
  node -e "
  const fs = require('fs');
  const pkg = JSON.parse(fs.readFileSync('$PACKAGE_JSON'));
  const [major, minor, patch, commit] = pkg.version.split('.').map(Number);
  if (commit + 1 >= 1000) {
    pkg.version = [major, minor, patch + 1, 1].join('.');
  } else {
    pkg.version = [major, minor, patch, commit + 1].join('.');
  }
  fs.writeFileSync('$PACKAGE_JSON', JSON.stringify(pkg, null, 2) + '\n');
  console.log('Version updated to', pkg.version);
  "
fi

# Stage the updated package.json
git add "$PACKAGE_JSON"

# Automatically commit the version update
git commit -m "chore: increment version to $NEW_VERSION"

echo "package.json updated and committed after successful commit."
