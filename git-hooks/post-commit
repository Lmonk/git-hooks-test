# #!/bin/bash

# # Ensure the script exits on any error
# set -e

# # Path to package.json
# PACKAGE_JSON="package.json"

# # Use jq (or a Node.js script) to increment the version
# if command -v jq >/dev/null 2>&1; then
#   # Using jq to increment patch version
#   NEW_VERSION=$(jq -r '.version' "$PACKAGE_JSON" | awk -F. '{OFS="."; $3+=1; print $0}')
#   jq ".version = \"$NEW_VERSION\"" "$PACKAGE_JSON" > temp.json && mv temp.json "$PACKAGE_JSON"
#   echo "Version updated to $NEW_VERSION"
# else
#   # If jq is not available, use Node.js
#   node -e "
#   const fs = require('fs');
#   const pkg = JSON.parse(fs.readFileSync('$PACKAGE_JSON'));
#   const [major, minor, patch, commit] = pkg.version.split('.').map(Number);
#   console.log('res', major, minor, patch, commit);
#   if(commit + 1 >= 1000) {
#     pkg.version = [major, minor, patch + 1, 1].join('.');
#   } else {
#     pkg.version = [major, minor, patch, commit + 1].join('.');
#   }
#   fs.writeFileSync('$PACKAGE_JSON', JSON.stringify(pkg, null, 2) + '\n');
#   console.log('Version updated to', pkg.version);
#   "
# fi

# # Stage the updated package.json
# git add "$PACKAGE_JSON"

# # Automatically commit the version update
# git commit -m "chore: increment version to $NEW_VERSION"

# echo "package.json updated and committed after successful commit."
